<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_sn_discovery.IPAddressHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Aleck.Lin@ServiceNow.com&#13;
A utility method for dealing with IP address </description>
        <name>IPAddressHelper</name>
        <script><![CDATA[var IPAddressHelper = Class.create();

//Convert IP address to a decimal
IPAddressHelper.toDecimal = function(ipAddr) {
	var ipDec;
	
	if (!validateIP(ipAddr)) {
		gs.info("Bad IP Address!");
		return;
	}
	
	var groups = ipAddr.split(".");
	if (groups.length != "4")
		return;
	
	ipDec = groups[0]*Math.pow(2,24) + groups[1]*Math.pow(2,16) + groups[2]*Math.pow(2,8) + parseInt(groups[3]);	
	
	return ipDec;
	
	function validateIP(ipAddr) {
		// my lame IP validator
		var ip = ipAddr;

		var grps = ip.split(".");
		if (grps.length != 4)
			return false;

		//Each number should be between 0 and 255
		for (var i=0; i<grps.length; i++) {
			if ((grps[i]).length > 3) {
				return false;
			}

			var num = parseInt(grps[i]);
			if (isNaN(num)) {
				return false;
			}
			
			if (num < 0) {
				return false;
			}
			
			if (num > 255) {
				return false;
			}
		}		
		
		return true;
	}
	
},
	
	
/* Convert CIDR network to starting and ending IP addresses */
IPAddressHelper.CIDRToIPs = function(network, subnet) {
	
	/* 
		returns an array of 2 elements, starting address and end address. For example, running this
		
			x_snc_sn_discovery.IPAddressHelper.CIDRToIPs('10.10.10.0/24')
			
		will return 
			
			["10.10.10.0", "10.10.10.255"]
	*/
	return getIpRangeFromAddressAndNetmask(network+"/"+subnet);
	
	function getIpRangeFromAddressAndNetmask(str) {
		var arr = str.split("/"); // split into ip address and netmask parts
		var ipaddr = arr[0].split('.');
		var netmask = ["0","0","0","0"];
		if(!/\d+\.\d+\.\d+\.\d+/.test(arr[1])) {
			// arr[1] should be between 0 and 32
			//fill the array with x number of positions with 1, rest with 0
			var mask= "";
			for(var index=0;index<32;index++)
				mask+= (index<arr[1])? '1':'0';
			
			//chunk it in 8 pieces
			netmask = [];
			while (mask.length) {
				netmask.push(mask.substr(0, 8));
				mask = mask.substr(8);
			}
			
			//convert to binary
			for(var i=0;i<4;i++)
				netmask[i] = parseInt(netmask[i], 2);
			
		} else {	
			netmask = arr[1].split('.').map(function(item) { return parseInt(item, 10); });
		}
		// invert for broadcast address (high address)
		// invert netmask to get ksamten
		var ksamten = netmask.map(function(item) { return item ^ 255; });
		var baseAddr = ipaddr.map(function(chunk, n) { return chunk & netmask[n]; });
		var broadcastAddr = baseAddr.map(function(chunk, n) { return chunk | ksamten[n]; });

		return [baseAddr.join('.'), broadcastAddr.join('.')];
	}
},
	

IPAddressHelper.prototype = {

    type: 'IPAddressHelper'
};


]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>aleck.lin</sys_created_by>
        <sys_created_on>2021-02-04 08:22:12</sys_created_on>
        <sys_id>6220d5fedb8ee0508c256b1813961970</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>IPAddressHelper</sys_name>
        <sys_package display_value="SN Discovery Schedule Attributes" source="x_snc_sn_discovery">5e50158adb02ec108c256b1813961918</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="SN Discovery Schedule Attributes">5e50158adb02ec108c256b1813961918</sys_scope>
        <sys_update_name>sys_script_include_6220d5fedb8ee0508c256b1813961970</sys_update_name>
        <sys_updated_by>aleck.lin</sys_updated_by>
        <sys_updated_on>2021-05-12 06:42:57</sys_updated_on>
    </sys_script_include>
</record_update>
