<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sysevent_script_action">
    <sysevent_script_action action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition_script/>
        <description/>
        <event_name>discovery.device.complete</event_name>
        <name>Set CI Attr from Disco schedule</name>
        <order>100</order>
        <script><![CDATA[(function() {

gs.info("1 Kicking off script action - Set CI Attr from Disco schedule"); 
	var cmdb_ci = current.cmdb_ci + '';
	var ipAddress = current.source + '';
	if (gs.nil(cmdb_ci) || gs.nil(ipAddress) ) {
		return; //If cmdb_ci or ip_address doesn't exist... just GTFO
	}

gs.info("2 getting status and schedule...");
	var discoStatus = current.status;
	var discoSchedule = discoStatus.dscheduler;

	if (gs.nil(discoSchedule))
		return; //if we can't find no schedule... unlikely, but check anyway

	var attributes = {};
	
	// Update CI based on attributes defined on the schedule directly
	var dsca = new GlideRecord("x_snc_sn_discovery_discovery_schedule_ci_attributes");
	dsca.addQuery("discovery_schedule", discoSchedule.sys_id+'');
	dsca.query();
	while (dsca.next()) {
		attributes[dsca.ci_attribute+''] = dsca.ci_attribute_value+'';		
	}
	

gs.info("3 Attributes defined on the schedule level: " + (new global.JSON().encode(attributes)));
	
	// Update CI based on the attributes defined on the IP ranges 
	var ipRanges = getAllDiscoIPRanges(discoSchedule);
	if (ipRanges.length == 0)
		return; //no range defined for some reason... unlikley, but check anyway
	
gs.info("4 we got some ranges! " + (new global.JSON().encode(ipRanges)));
	var ipRange = getIPRangeForThisIPAddress(ipRanges, ipAddress);
	if (gs.nil(ipRange)) {
		return;  //no range is responsible for this IP... shoudln't be possible, but need to define this case
	}
gs.info("5 we found range responsible for the ip " + ipRange);
	var gr = new GlideRecord("x_snc_sn_discovery_discovery_schedule_ci_attributes");
	gr.addQuery("discovery_ip_range", ipRange);
	gr.query();
	while (gr.next()) {
		attributes[gr.ci_attribute+''] = gr.ci_attribute_value+'';
	}
	
gs.info("Final attributes for the CI..." + (new global.JSON().encode(attributes)));
	
	//Update the CI with the attributes found...
	updateCIWithAttributes(cmdb_ci, attributes);

	
	function updateCIWithAttributes(cmdbCI, attributes) {
		var gci = new global.GlideRecordUtil().getGR("cmdb_ci", cmdbCI);
		if (gs.nil(gci)) {
gs.info("couldnt find CI " + cmdbCI.sys_id+'');
			return; //for some reason the ci can't be found! GTFO
		}
		
		for (var name in attributes) {
gs.info("name is " + name + ". value is " + attributes[name]);			
			gci[name] = attributes[name];
		}
		
		gci.update();
	}
	
	//Now we need to figure out which range set this particular CI falls under and then figure out what attributes need to be updated
	function getIPRangeForThisIPAddress(ipRanges, ipAddress) {			
		var ipAddressDecimal = x_snc_sn_discovery.IPAddressHelper.toDecimal(ipAddress);	
gs.info("ipAddressDecimal for the IP is " + ipAddressDecimal);
		for (var i=0; i<ipRanges.length; i++) {
			//Just need to find the first one that hits!
			var ipRange = ipRanges[i];
			var dsca = new GlideRecord("x_snc_sn_discovery_ip_range_calculation");
			dsca.addQuery("discovery_ip_range", ipRange);
			dsca.addQuery("list_of_ips", "CONTAINS", ipAddress);
			dsca.query();
			if (dsca.next())
				return ipRange;

			// we didn't find it within the list of ip range defined using distinct ip addresses, let's now look at ranges defined using cidr or range
			dsca.initialize();
			dsca.addQuery("discovery_ip_range", ipRange);
			dsca.addQuery("starting_ip_decimal", "<=", ipAddressDecimal);
			dsca.addQuery("ending_ip_decimal", ">=", ipAddressDecimal);
			dsca.query();

			if (dsca.next())
				return ipRange;

		}
		
		return;
	}
	
	
	function getAllDiscoIPRanges(discoSchedule) {
		var ipRanges = [];
gs.info("3.1 discoschedule is " + discoSchedule.sys_id+'');	
		//We look for both IP ranges associated with it directly and also range set
		//Look at directly attached IP Ranges
		var dri = new GlideRecord("discovery_range_item");
		dri.addQuery("schedule", discoSchedule.sys_id+'');
		dri.query();
		while (dri.next())
			ipRanges.push(dri.sys_id+'');

		//Look for range sets in the m2m, and get all the IP ranges witin each set
		var drm2m = new GlideRecord("discovery_schedule_range");
		drm2m.addQuery("dscheduler", discoSchedule.sys_id+'');
		drm2m.query();
		while (drm2m.next()) {
			var dri2 = new GlideRecord("discovery_range_item");
			dri2.addQuery("parent", drm2m.range.sys_id+'');
			dri2.query();
			while (dri2.next())
				ipRanges.push(dri2.sys_id+'');
		}
		
gs.info("3.2 got here! ipranges length is " + ipRanges.length);
		
		return ipRanges;
	}

	
}());
	
	]]></script>
        <synchronous>false</synchronous>
        <sys_class_name>sysevent_script_action</sys_class_name>
        <sys_created_by>aleck.lin</sys_created_by>
        <sys_created_on>2021-02-04 00:22:24</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>167227a6dbc2e0508c256b1813961982</sys_id>
        <sys_mod_count>41</sys_mod_count>
        <sys_name>Set CI Attr from Disco schedule</sys_name>
        <sys_overrides/>
        <sys_package display_value="SN Discovery Schedule Attributes" source="x_snc_sn_discovery">5e50158adb02ec108c256b1813961918</sys_package>
        <sys_policy/>
        <sys_scope display_value="SN Discovery Schedule Attributes">5e50158adb02ec108c256b1813961918</sys_scope>
        <sys_update_name>sysevent_script_action_167227a6dbc2e0508c256b1813961982</sys_update_name>
        <sys_updated_by>aleck.lin</sys_updated_by>
        <sys_updated_on>2021-02-12 08:41:04</sys_updated_on>
    </sysevent_script_action>
</record_update>
